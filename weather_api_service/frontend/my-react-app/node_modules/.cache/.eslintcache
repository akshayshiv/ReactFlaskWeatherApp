[{"/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/index.js":"1","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/App.js":"2","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/reportWebVitals.js":"3","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/forecast.js":"4","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/weatherTable.js":"5","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/Login.js":"6","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/Signup.js":"7","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/dailySun.js":"8"},{"size":535,"mtime":1674327706055,"results":"9","hashOfConfig":"10"},{"size":4455,"mtime":1674621112365,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1674327706056,"results":"12","hashOfConfig":"10"},{"size":2765,"mtime":1674618534568,"results":"13","hashOfConfig":"10"},{"size":2397,"mtime":1674620757059,"results":"14","hashOfConfig":"10"},{"size":1300,"mtime":1674611407089,"results":"15","hashOfConfig":"10"},{"size":1033,"mtime":1674530451288,"results":"16","hashOfConfig":"10"},{"size":1329,"mtime":1674620321593,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bwmjnp",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/index.js",[],[],"/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/App.js",["46","47","48"],[],"/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/reportWebVitals.js",[],[],"/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/forecast.js",["49"],[],"import React from \"react\";\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { Box } from \"@mui/system\";\n\n// After looking at this, I realize this is duplicated code. \n//  What I can do as a cleaner refactor with more time is to setup props to be modular and expect a \n//  fixed input object, since both the hourly and the daily weather forecast tables share the same data inputs, \n//  but from different parts of the API response.  And then when I call these components, \n//  I could just pass in the different data fields depending on whether it’s from the hourly data payload or \n//  the daily data payload\nexport const Forecast = ({forecast, fahrenheit}) => {\n\n    let arr = forecast.forecast.forecastday[0].hour\n    arr = [arr[0], arr[3], arr[6], arr[9], arr[12], arr[15], arr[18], arr[21]] // these are the hours that we want per the example\n    return (\n        <div>\n            <h2>Weather in {forecast.location.name}, {forecast.location.region}</h2>\n            <Box>\n                <TableContainer component = {Paper}>         \n                    <Table sx={{ maxWidth: 300 }} aria-label=\"simple table\">\n                    \n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Time</TableCell>\n                                <TableCell>Weather</TableCell>\n                                <TableCell>Temperature</TableCell>\n                                <TableCell>Humidity</TableCell>\n                                <TableCell>Wind Speed (MPH)</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        \n                        <TableBody>\n                            {arr.map(hour => (\n                                <TableRow key={hour.time}>\n                                    <TableCell>{hour.time}</TableCell>\n                                    <TableCell> <img src = {hour.condition.icon}/></TableCell>\n                                    <TableCell>{fahrenheit? hour.temp_f : hour.temp_c }°</TableCell>\n                                    <TableCell>{hour.humidity}%</TableCell>\n                                    <TableCell>{hour.wind_mph}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                \n                </TableContainer>\n            </Box>\n            \n           \n            \n    </div>\n    )\n};","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/weatherTable.js",["50"],[],"import { TableContainer } from \"@mui/material\";\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport React from \"react\";\nimport { Box } from \"@mui/system\";\n\n// After looking at this, I realize this is duplicated code. \n//  What I can do as a cleaner refactor with more time is to setup props to be modular and expect a \n//  fixed input object, since both the hourly and the daily weather forecast tables share the same data inputs, \n//  but from different parts of the API response.  And then when I call these components, \n//  I could just pass in the different data fields depending on whether it’s from the hourly data payload or \n//  the daily data payload\n\nexport const MultiDayWeatherForecast = ({forecast, days, fahrenheit}) => {\n    return (\n        <div>\n            <h2>{days} day forecast</h2>\n        <Box>\n            <TableContainer component = {Paper}>\n            <Table sx={{ maxWidth: 300 }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Weather</TableCell>\n                        <TableCell>Temperature</TableCell>\n                        <TableCell>Humidity</TableCell>\n                        <TableCell>Wind Speed (MPH)</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {forecast.forecastday.map(day => (\n                        <TableRow key={day.date}>\n                            <TableCell>{day.date}</TableCell>\n                            <TableCell> <img src = {day.day.condition.icon}/></TableCell>\n                            <TableCell>{ fahrenheit ? `${day.day.maxtemp_f}°/${day.day.mintemp_f}°`: `${day.day.maxtemp_c}°/${day.day.mintemp_c}°`}</TableCell>\n                            <TableCell>{day.day.avghumidity}%</TableCell>\n                            <TableCell>{day.day.maxwind_mph}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n                \n            </Table>\n            \n            </TableContainer>\n            </Box>\n\n            \n        </div>\n    )\n};","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/Login.js",["51"],[],"import React, { useState } from 'react';\nimport \"../Login.css\"\nasync function loginUser(credentials) {\n  \n return fetch('http://127.0.0.1:5900/signin', {\n   method: 'POST',\n   headers: {\n     'Content-Type': 'application/json'\n   },\n   body: JSON.stringify(credentials)\n })\n   .then(res => {\n      if (res.status == 200){\n          localStorage.setItem('items', Date.now().toString())\n      }\n   })\n   .catch(_ => {\n    alert(\"Invalid Username and Password Combination\")\n   })\n}\n\nexport default function Login({setToken}) {\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = await loginUser({\n      username,\n      password\n    });\n    setToken(token);\n  }\n\n\n  return(\n    <div class = \"body container\">\n      <h1>Log In</h1>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <p>Username</p>\n          <input type=\"text\" name = \"username\" onChange={e => setUserName(e.target.value)} />\n        </label>\n        <label>\n          <p>Password</p>\n          <input type=\"password\" name = \"password\" onChange={e => setPassword(e.target.value)} />\n        </label>\n        <div>\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  )\n}","/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/Signup.js",[],[],"/Users/akshay/Downloads/weather_forecast_app-main/weather_api_service/weather_api_service/frontend/my-react-app/src/components/dailySun.js",["52"],[],"import \"../Table.css\"\nimport TableContainer from '@mui/material/TableContainer';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\n\nconst sunriseStyle = {\n  display: \"inline-block\",\n  paddingTop:\"20px\"\n  \n};\n\nexport const SunriseSunset = ({forecast, fahrenheit}) => {\n    return (\n        <div>            \n            <TableContainer component = {Paper}>\n                <div style = {sunriseStyle}>\n                    <Table sx={{ maxWidth: 300 }} aria-label=\"simple table\">\n                        <TableRow><img src = {forecast.current.condition.icon}/><p>{forecast.current.condition.text}</p></TableRow>\n                        <TableRow>Sunrise: {forecast.forecast.forecastday[0].astro.sunrise}</TableRow>\n                        <TableRow>Sunset: {forecast.forecast.forecastday[0].astro.sunset}</TableRow>\n                        <TableRow>Moonrise: {forecast.forecast.forecastday[0].astro.moonrise}</TableRow>\n                        <TableRow>Moonset: {forecast.forecast.forecastday[0].astro.moonset}</TableRow>\n                    <TableRow>Current Temperature: {fahrenheit ?forecast.current.temp_f:forecast.current.temp_c}</TableRow>\n                    </Table>\n                </div>\n            </TableContainer>\n        </div>\n    )\n}",{"ruleId":"53","severity":1,"message":"54","line":42,"column":13,"nodeType":"55","messageId":"56","endLine":42,"endColumn":15},{"ruleId":"53","severity":1,"message":"54","line":50,"column":20,"nodeType":"55","messageId":"56","endLine":50,"endColumn":22},{"ruleId":"57","severity":1,"message":"58","line":67,"column":10,"nodeType":"59","messageId":"60","endLine":67,"endColumn":20},{"ruleId":"61","severity":1,"message":"62","line":42,"column":49,"nodeType":"63","endLine":42,"endColumn":83},{"ruleId":"61","severity":1,"message":"62","line":38,"column":41,"nodeType":"63","endLine":38,"endColumn":78},{"ruleId":"53","severity":1,"message":"54","line":13,"column":22,"nodeType":"55","messageId":"56","endLine":13,"endColumn":24},{"ruleId":"61","severity":1,"message":"62","line":19,"column":35,"nodeType":"63","endLine":19,"endColumn":81},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'inputValue' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]